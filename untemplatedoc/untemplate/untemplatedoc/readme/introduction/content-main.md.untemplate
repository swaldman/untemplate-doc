val title = "Introduction"
val meta  =  SubsectionMeta( level, title )
mbMetadata = Some( SubsectionMeta( level, title ) )

(level : Int)[SubsectionMeta]~()>

Every once in a while, I find I need to build a little website for something.
I've become a fan of static site generators for that. I've worked with [hugo](https://gohugo.io/) and
[hexo](https://hexo.io/) and [paradox](https://developer.lightbend.com/docs/paradox/current/index.html),
and they've all been great in their way.

But each time, I find myself spending a lot of time in their docs, figuring out each
SSG's specific DSLs, their tricks for doing things, what variables are exposed in
templates, etc.

I found myself yearning for simplicity. Why can't I just specify my static sites in my language
of choice? (For me, Scala.)

Static (and dynamic) site generation is in practice largely about templates. No one enjoys
embedding tons of HTML or Markdown or CSS in programming-language string literals, even
in modern languages that support multiline literals and interpolated strings.

But templates are a step along the slippery path to DSLs with clever, powerful features
that become the idiosyncracies and quirks I'm trying to escape. As much as possible, I
want my specification language to be straightforward Scala.

_Untemplate_ is my attempt to create the thinnest possible template veneer over vanilla Scala 3.
An untemplate is just a text file that optionally includes any of four special delimeters:

| Delimeter | Description |
| --- | --- |
| `\<(expression)>` | Text-embedded Scala expression |
| `\()>` | Code / text boundary |
| `\<()` | Text / code boundary |
| `\()[]~()>` | Header delimeter |

These have the following effects:

* `\<(expression)>` breaks out of plain text and inserts the result into the text
* `\()>` alone, at the beginning of a line, divides the file into a Scala code region, and a
text region. The region above is a Scala code region.
*  `\<()` alone, at the beginning of a line, is the inverse of the prior delimeter. It divides the
file into a text region and a Scala code region, with text in the region above, and code in the
region beneath.
*  `\()[]~()>` is a special header delimiter. Like `\()>`, it divides the file into a Scala code
region above and a text region below. However, import statements in the code region above become
top-level imports in the generated file.

<( box(Some(":bulb:"), Some("Mnemonic"))( """For every construct, whatever an "arrow" &mdash; `<` or `>`&mdash points at is a text region. Whatever a parenthesis &mdash; `(` or `)` or `()` &mdash; is adjacent to is code.""" ) )>

