
val title = "Embedded expressions"
mbMetadata = Some( SubsectionMeta( level, title ) )

(level : Int)[SubsectionMeta]~()>

We'd like, of course, for our (un)template library to do a bit more than just spit out unmodified
text files though. Let's modify our example just a bit:

```markdown
<()
writer.writeln(Files.readString(ceci2Src).trim)
()>
```

Now, the [generated scala](<( sgenFor("untemplatedoc/ceci-nest-pas2.md.untemplate") )>) _would_ transform the markdown, like this:

```markdown
<()
writer.writeln(untemplatedoc.ceci_nest_pas2_md(immutable.Map.empty).text)
()>
```

The delimiter `\<( expression )>` causes the `expression` to be evaluated into the text.

<()
(escapingDelimiters)>
This `README.md` is [generated by](<( readmeTopSrc )>) an untemplate! [[current subsection](<( readmeEmbeddedExpressionsSrc )>)]
So how did I slip that delimiter in? Any
of the untemplate delimiters &mdash; there are only four! &mdash; can be escaped with a `\` character
just prior to them. The `\` will be stripped, then the delimiter included in the text unmodified.

<()
writer.writeln {
  box( None, Some("Note") )( escapingDelimiters() )
}
