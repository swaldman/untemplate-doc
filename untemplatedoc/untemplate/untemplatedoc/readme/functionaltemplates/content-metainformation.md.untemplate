> val UntemplateAttributes = immutable.Map (
>   "Tags"    -> immutable.Set("Boring", "Useful"),
>   "PubDate" -> "2023-02-12"
> )

val title = "Metainformation"
mbMetadata = Some( SubsectionMeta( level, title ) )

(level : Int)[SubsectionMeta]~()> This is a header note.                   # This is a comment

Within an untemplate, you have access to variables containing metainformation about the generated function.

It may be useful to use `UntemplateFunction` as a Map key, in order to decorate it with metadata.
Beyond that, if this will be useful at all, it will probably be for debugging.

For the [untemplate you are reading](<( readmeMetainformationSrc )>) [[generated scala](<( sgenFor("untemplatedoc/readme/functionaltemplates/content-metainformation.md.untemplate") )>)]:

```
UntemplateFunction:                      <(UntemplateFunction)>
UntemplateName:                         "<(UntemplateName)>"
UntemplatePackage:                      "<(UntemplatePackage)>"
UntemplateFullyQualifiedName:           "<(UntemplateFullyQualifiedName)>"
UntemplateInputTypeDeclared:            "<(UntemplateInputTypeDeclared)>"
UntemplateInputTypeCanonical:            <(UntemplateInputTypeCanonical)>
UntemplateInputDefaultArgument:          <(UntemplateInputDefaultArgument)>
UntemplateOutputMetadataTypeDeclared:   "<(UntemplateOutputMetadataTypeDeclared)>"
UntemplateOutputMetadataTypeCanonical:   <(UntemplateOutputMetadataTypeCanonical)>
UntemplateHeaderNote:                   "<(UntemplateHeaderNote)>"
UntemplateLastModified:                  <(UntemplateLastModified)> // milliseconds into UNIX epoch
UntemplateSynthetic:                     <(UntemplateSynthetic)> // set to true if you implement by hand the trait untemplate. an untemplate transpiled in the usual way from the source documented here is NOT synthetic.
UntemplateAttributes:                    <(UntemplateAttributes)>
UntemplateAttributesLowerCased:          <(UntemplateAttributesLowerCased)>
```

`UntemplateFunction` is a reference to the `Untemplate` (which is a subtype of `Function1`) that implements your untemplate.

"Declared" type values are just `String`, and names _may not be fully qualified_.

"Canonical" types are, if possible, resolved to fully qualified type names that look through (non-opaque) aliases.
However, for some types such resolution may not be possible, so these are `Option[String]`

`UntemplateInputDefaultArgument` is an `Option[T]` where `T` is the input type and the value is `Some(defaultInputArg)`
if one was defined or `None` otherwise.

For more on header notes, see [below](#long-delimiters-header-notes-and-comments).

Untemplates can define custom [attributes](#attributes) for themselves as an `immutable.Map[String,Any]`.

<( box(None, Some("Note"))( """All untemplates import `scala.collection.*`, so `immutable.Map[String,Any]` is a name in scope.""" ) )>

Because it's often convenient to resolve attributes in a case-independent way, untemplates also
offer an `immutable.Map[LowerCased,Any]`, where `LowerCased` is an opaque type representing
a lowercased `String`. For example,

```scala
import untemplate.LowerCased

val pubDateKey = LowerCased("PubDate")
val mbPubDate = myUntemplate.UntemplateAttributesLowerCased.get(pubDateKey)
```

Untemplate metadata is available not only within your untemplates. Each untemplate
becomes becomes an `untemplate.Untemplate` object, on which all the metadata
fields are available as public vals. If you have an untemplate called
`mypkg.hello_md`, there will be an `untemplate.Untemplate` object called
`mypkg.Untemplate_hello_md`, so you can write, e.g.

```scala
val helloHeaderNote = mypkg.Untemplate_hello_md.UntemplateHeaderNote
```

This can be particularly useful in combination with [indexing](#indexing).
