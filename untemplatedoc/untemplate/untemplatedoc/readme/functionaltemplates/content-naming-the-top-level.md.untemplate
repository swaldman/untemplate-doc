val title = "Naming the top-level untemplate function"
mbMetadata = Some( SubsectionMeta( level, title ) )

(level : Int)[SubsectionMeta]~()>

The `untemplate` app and file-system based tooling in the library will derive a default name for the
top-level generated function by transforming its filename. Untemplate are expected to have the suffix
`.untemplate`. The top-level file you are reading is is [`untemplatedoc.readme.frame-main.md.untemplate`](<(readmeTopSrc)>), and [generates a
function](<( sgenFor("untemplatedoc/readme/frame-main.untemplate") )>) like...

```scala
package untemplatedoc.readme

def frame-main.md( input: immutable.Map[String,Any] ) : untemplate.Result[Nothing] = ???
```
<()
(chillOnReturnType)>
Return type `untemplate.Result[Nothing]` looks intimidating, but it's just a
fancy wrapper for a `String`, as a field called `text`.
The `[Nothing]` part just means there cannot be metadata attached to this result.
<()
writer.writeln {
  box( None, Some("Note") )( chillOnReturnType() )
}
()>

You can override the generated function name in
the same way block function names are defined. Header `\()[]~(untemplateDoc)>` would generate

```scala
def untemplateDoc( input: immutable.Map[String,Any] ) : untemplate.Result[Nothing] = ???
```
Header `\(pubDate: Instant)[]~(untemplateDoc)>` would generate

```scala
def untemplateDoc( pubDate: Instant ) : untemplate.Result[Nothing] = ???
```

Here's an example untemplate. Check out the [generated scala](<( sgenFor("untemplatedoc/some_overrides.md.untemplate") )>) code.

```scala
<()
writer.writeln(Files.readString(someOverridesSrc).trim)
()>
```
Which generates...

```markdown
<()
writer.writeln(untemplatedoc.untemplateDoc( java.time.Instant.now() ).text)
()>
```
<()
(headerWithNamedBlock)>
What if you want to override the name of the top level function _and_ use
the first text block as a function? You can!

The header `\()[]~(mamaFunction.startText)>`
would override the outer function name with `mamaFunction`, and turn the first text block into
a function `startText()`.

The header `\()[]~(.startText)>` would turn the first text block into a function
called `startText()`, but leave the top-level function name alone.
<()
writer.writeln {
  box( Some(":question:"), Some("Question") )( headerWithNamedBlock() )
}


