import java.nio.file.Files
import com.mchange.codegenutil.*

val title = "Some simple untemplates"

val subsections = Vector (
  Subsection("Embedded expressions"),
  Subsection("Repeatable, omittable, blocks")
)

mbMetadata = Some( Subsection( title, subsections.toList ) )

(level : Int)[Subsection]~()>

<( hashHeader(level) )> <( title )>

Let's look at an untemplate so simple it seems not to be an untemplate at all.

```markdown
<()
writer.writeln(Files.readString(ceciSrc).trim)
()>
```
It's just a markdown file! But if it's stored in an untemplate source directory as `ceci-nest-pas.md.untemplate`, it gets
compiled to a simple scala function.

```scala
<()
writer.writeln(Files.readString(ceciScala).trim)
()>
```

<( hashHeader(level+1) )> <( subsections(0).title )>

We'd like, of course, for our (un)template library to do a bit more than just spit out unmodified
text files though. Let's modify our example just a bit:

```markdown
<()
writer.writeln(Files.readString(ceci2Src).trim)
()>
```

Now, the [generated scala](<( sgenFor("ceci_nest_pas2_md") )>) _would_ transform the markdown, like this:

```markdown
<()
writer.writeln(untemplatedoc.ceci_nest_pas2_md(immutable.Map.empty).text)
()>
```

The delimeter `\<( expression )>` causes the `expression` to be evaluated into the text.

> **Note** <br/>
> This `README.md` is [generated by](<( readmeTopSrc )>) an untemplate! [[current subsection](<( readmeSomeSimpleTemplatesSrc )>)]
> So how did I slip that delimiter in? Any
> of the untemplate delimeters &mdash; there are only four! &mdash; can be escaped with a `\` character
> just prior to them. The `\` will be stripped, then the delimeter included in the text unmodified.

<( hashHeader(level+1) )> <( subsections(1).title )>

Often you'd like to do more than just embed a few very simple expressions in some text.
So, you can break up your text into code blocks and text blocks. Let's do that, and repeat
a block of text in a loop.

```markdown
<()
writer.writeln(Files.readString(loopySrc).trim)
()>
```

Let's get a look at what it produces:
```markdown
<()
writer.writeln(untemplatedoc.loopy_md(immutable.Map.empty).text)
()>
```

And again!
```markdown
<()
writer.writeln(untemplatedoc.loopy_md(immutable.Map.empty).text)
()>
```
([generated scala](<( sgenFor("loopy_md") )>))





