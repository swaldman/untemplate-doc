import java.nio.file.{Path, Files}
import com.mchange.codegenutil.*

val usrcDir      = Path.of("src/main/untemplate")
val egenDir      = Path.of("example/untemplate")
val sgenDir      = Path.of("example/scalagen")
val ceciSrc      = usrcDir.resolve("untemplatedoc/ceci-nest-pas.md.untemplate")
val ceciScala    = sgenDir.resolve("untemplatedoc/untemplate_ceci_nest_pas_md.scala")
val ceci2Src     = usrcDir.resolve("untemplatedoc/ceci-nest-pas2.md.untemplate")
val loopySrc     = usrcDir.resolve("untemplatedoc/loopy.md.untemplate")
val loopy2badSrc = usrcDir.resolve("untemplatedoc/loopy2-bad.md.untemplate-off")
val loopy2Src    = usrcDir.resolve("untemplatedoc/loopy2.md.untemplate")


()[]~()>

# Untemplate Docs

_This project documents the `untemplate` project. For the code, please see [swaldman/untemplate](https://github.com/swaldman/untemplate)._

## Introduction

TBD!

## Untemplate Basics

Let's look at an untemplate so simple it seems not to be an untemplate at all.

```markdown
<()
writer.writeln(Files.readString(ceciSrc).trim)
()>
```
It's just a markdown file! But it's stored in an untemplate source directory as `ceci-nest-pas.md.untemplate`, so it gets
compiled to a simple scala function.

```scala
<()
writer.writeln(Files.readString(ceciScala).trim)
()>
```
### Embedded expressions

We'd like, of course, for our (un)template library to do a bit more than just spit out unmodified
text files though. Let's modify our example just a bit:

```markdown
<()
writer.writeln(Files.readString(ceci2Src).trim)
()>
```

Now, the [generated scala](<(sgenDir)>/untemplatedoc/untemplate_ceci_nest_pas2_md.scala) _would_ transform the markdown, like this:

```markdown
<()
writer.writeln(untemplatedoc.ceci_nest_pas2_md(immutable.Map.empty))
()>
```

The delimeter `\<( expression )>` causes the `expression` to be evaluated into the text.

---

<i>Note: This `README.md` is [generated by](<(sgenDir)>/untemplatedoc/untemplate_README_md.scala) an untemplate!
So how did I slip that delimiter in? Any
of the untemplate delimeters &mdash; there are only four! &mdash; can be escaped with a `\` character
just prior to them. The `\` will be stripped, then the delimeter included in the text unmodified.</i>

### Reapeatable, omitable, blocks

Often you'd like to do more than just embed a few very simple expressions in some text.
So, you can break up your text into code blocks and text blocks. Let's do that, and repeat
a block of text in a loop.

```markdown
<()
writer.writeln(Files.readString(loopySrc).trim)
()>
```

Let's get a look at what it produces:
```markdown
<()
writer.writeln(untemplatedoc.loopy_md(immutable.Map.empty))
()>
```

And again!
```markdown
<()
writer.writeln(untemplatedoc.loopy_md(immutable.Map.empty))
()>
```

### Named blocks as functions

Maybe we want to use our expression-enriched text blocks in more than one place on our page.
We can name our blocks, and then they become functions. To do that, instead of beginning our
blocks with `\()>`, we embed a valid identifier in the parenthesis, like `\(loopy)>`.

However, that carries with it a few complications. If we just try that in our loopy markdown
file as it was, we'll get compilation errors.

The file...
```scala
<()
writer.writeln(Files.readString(loopy2badSrc).trim)
()>
```
And the ickies...
```
[info] compiling 1 Scala source to /Users/swaldman/Dropbox/BaseFolders/development-why/gitproj/untemplate-doc/target/scala-3.2.1/classes ...
[error] -- [E018] Syntax Error: /Users/swaldman/Dropbox/BaseFolders/development-why/gitproj/untemplate-doc/target/scala-3.2.1/src_managed/main/untemplate/untemplatedoc/untemplate_loopy2_bad_md.scala:11:24
[error] 11 |  for (i <- 0 until num)
[error]    |                        ^
[error]    |                        expression expected but val found
[error]    |
[error]    | longer explanation available when compiling with `-explain`
[error] -- [E006] Not Found Error: /Users/swaldman/Dropbox/BaseFolders/development-why/gitproj/untemplate-doc/target/scala-3.2.1/src_managed/main/untemplate/untemplatedoc/untemplate_loopy2_bad_md.scala:15:57
[error] 15 |  def loopy( arg : immutable.Map[String,Any] = input ) = block0( arg )
[error]    |                                                         ^^^^^^
[error]    |                                                       Not found: block0
[error]    |
[error]    | longer explanation available when compiling with `-explain`
[error] two errors found
```

Before things worked, because when we're just printing an expression to output, we indent the call to write in
the generated code so that it falls inside of any loops, if expressions, or other language constructs that the
prior code block has set up.

If we are going to want to treat the block as a reusable function, we do not wish to enclose its declaration
in a very narrow scope. So, the declaration of named blocks is not indented, and named blocks do not print by default.
If you want to use a named block, define it before you get to branches in your code flow,
then call your named function, which returns a `String` you can write. Let's fix our _Loopy_.

```scala
<()
writer.writeln(Files.readString(loopy2Src).trim)
()>
```

Not the loveliest file. But educational.
Here is the output...

```markdown
<()
writer.writeln(untemplatedoc.loopy2_md(immutable.Map.empty))
()>
```
