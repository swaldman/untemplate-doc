package untemplatedoc

import java.io.{Writer,StringWriter}
import scala.collection.*

import java.nio.file.{Path, Files}
import com.mchange.codegenutil.*

def README_md(input : immutable.Map[String,Any]) : String =
  val writer = new StringWriter(131072) //XXX: Hardcoded initial capacity


  val usrcDir      = Path.of("src/main/untemplate")
  val egenDir      = Path.of("example/untemplate")
  val sgenDir      = Path.of("example/scalagen")
  val ceciSrc      = usrcDir.resolve("untemplatedoc/ceci-nest-pas.md.untemplate")
  val ceciScala    = sgenDir.resolve("untemplatedoc/untemplate_ceci_nest_pas_md.scala")
  val ceci2Src     = usrcDir.resolve("untemplatedoc/ceci-nest-pas2.md.untemplate")
  val loopySrc     = usrcDir.resolve("untemplatedoc/loopy.md.untemplate")
  val loopy2badSrc = usrcDir.resolve("untemplatedoc/loopy.md.untemplate")


  // scratchpad += Tuple2("sgenDir",sgenDir)
    val block0 = new Function1[immutable.Map[String,Any],String]:
      def apply( input : immutable.Map[String,Any] ) : String =
        "\n# Untemplate Docs\n\n_This project documents the `untemplate` project. For the code repository, please see [swaldman/untemplate](https://github.com/swaldman/untemplate)._\n\n## Introduction\n\nTBD!\n\n## Untemplate Basics\n\nLet's look at an untemplate so simple it seems not to be an untemplate at all.\n\n```markdown\n"
    writer.write(block0( input ))
    
  writer.writeln(Files.readString(ceciSrc).trim)
    val block1 = new Function1[immutable.Map[String,Any],String]:
      def apply( input : immutable.Map[String,Any] ) : String =
        "```\nIt's just a markdown file! But it's stored in an untemplate source directory as `ceci-nest-pas.md.untemplate`, so it gets\ncompiled to a simple scala function.\n\n```scala\n"
    writer.write(block1( input ))
    
  writer.writeln(Files.readString(ceciScala).trim)
    val block2 = new Function1[immutable.Map[String,Any],String]:
      def apply( input : immutable.Map[String,Any] ) : String =
        "```\n### Embedded expressions\n\nWe'd like, of course, for our (un)template library to do a bit more than just spit out unmodified\ntext files though. Let's modify our example just a bit:\n\n```markdown\n"
    writer.write(block2( input ))
    
  writer.writeln(Files.readString(ceci2Src).trim)
    val block3 = new Function1[immutable.Map[String,Any],String]:
      def apply( input : immutable.Map[String,Any] ) : String =
        "```\n\nNow, the [generated scala](" + sgenDir +
        "/untemplatedoc/untemplate_ceci_nest_pas2_md.scala) _would_ transform the markdown, like this:\n\n```markdown\n"
    writer.write(block3( input ))
    
  writer.writeln(untemplatedoc.ceci_nest_pas2_md(immutable.Map.empty))
    val block4 = new Function1[immutable.Map[String,Any],String]:
      def apply( input : immutable.Map[String,Any] ) : String =
        "```\n\nThe delimeter `<( expression )>` causes the `expression` to be evaluated into the text.\n\n---\n\n<i>Note: This `README.md` is [generated by](" + "sgenDir" +
        "/untemplatedoc/untemplate_README_md.scala) an untemplate!\nSo how did I slip that delimiter in? Any\nof the untemplate delimeters &mdash; there are only four! &mdash; can be escaped with a `\\` character\njust prior to them. The `\\` will be stripped, then the delimeter included in the text unmodified.</i>\n\n### Reapeatable, omitable, blocks\n\nOften you'd like to do more than just embed a few very simple expressions in some text.\nSo, you can break up your text into code blocks and text blocks. Let's do that, and repeat\na block of text in a loop.\n\n```markdown\n"
    writer.write(block4( input ))
    
  writer.writeln(Files.readString(loopySrc).trim)
    val block5 = new Function1[immutable.Map[String,Any],String]:
      def apply( input : immutable.Map[String,Any] ) : String =
        "```\n\nLet's get a look at what it produces:\n```markdown\n"
    writer.write(block5( input ))
    
  writer.writeln(untemplatedoc.loopy_md(immutable.Map.empty))
    val block6 = new Function1[immutable.Map[String,Any],String]:
      def apply( input : immutable.Map[String,Any] ) : String =
        "```\n\nAnd again!\n```markdown\n"
    writer.write(block6( input ))
    
  writer.writeln(untemplatedoc.loopy_md(immutable.Map.empty))
    val block7 = new Function1[immutable.Map[String,Any],String]:
      def apply( input : immutable.Map[String,Any] ) : String =
        "```\n\n### Blocks as functions\n\nMaybe we want to use our expression-enriched text blocks in more than one place on our page.\nWe can name our blocks, and then they become functions. To do that, instead of beginning our\nblocks with `()>`, we embed a valid identifier in the parenthesis, like `(loopy)>`.\n\nHowever, that carries with it a few complications. If we just try that in our loopy markdown\nfile as it was, we'll get compilation errors.\n"
    writer.write(block7( input ))
    
  writer.toString
  
end README_md

