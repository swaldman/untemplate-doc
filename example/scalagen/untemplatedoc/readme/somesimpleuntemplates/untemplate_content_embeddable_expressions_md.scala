package untemplatedoc.readme.somesimpleuntemplates

import java.io.{Writer,StringWriter}
import scala.collection.*

import java.nio.file.Files
import com.mchange.codegenutil.*
import untemplatedoc.*


val Function_content_embeddable_expressions_md = new Function1[Int,untemplate.Result[SubsectionMeta]]:
  val UntemplateFunction             = this
  val UntemplateName                 = "content_embeddable_expressions_md"
  val UntemplateInputName            = "level"
  val UntemplateInputType            = "Int"
  val UntemplateInputDefaultArgument = (None : Option[String])
  val UntemplateOutputMetadataType   = "SubsectionMeta"

  def apply(level : Int) : untemplate.Result[SubsectionMeta] =
    val writer             : StringWriter = new StringWriter(12670)
    var mbMetadata         : Option[SubsectionMeta] = None
    var outputTransformer  : Function1[untemplate.Result[SubsectionMeta],untemplate.Result[SubsectionMeta]] = identity



    val title = "Embedded expressions"

    mbMetadata = Some( SubsectionMeta( level, title ) )

    outputTransformer = readme.subsection_content_transformer_md


      val block0 = new Function0[String]:
        def apply() : String =
          "\nWe'd like, of course, for our (un)template library to do a bit more than just spit out unmodified\ntext files though. Let's modify our example just a bit:\n\n```markdown\n"
      writer.write(block0())
      
    writer.writeln(Files.readString(ceci2Src).trim)
      val block1 = new Function0[String]:
        def apply() : String =
          "```\n\nNow, the [generated scala](" + ( sgenFor("ceci_nest_pas2_md") ) +
          ") _would_ transform the markdown, like this:\n\n```markdown\n"
      writer.write(block1())
      
    writer.writeln(untemplatedoc.ceci_nest_pas2_md(immutable.Map.empty).text)
      val block2 = new Function0[String]:
        def apply() : String =
          "```\n\nThe delimeter `<( expression )>` causes the `expression` to be evaluated into the text.\n\n"
      writer.write(block2())
      

    val block3 = new Function0[String]:
      def apply() : String =
        "This `README.md` is [generated by](" + ( readmeTopSrc ) +
        ") an untemplate! [[current subsection](" + ( readmeEmbeddedExpressionsSrc ) +
        ")]\nSo how did I slip that delimiter in? Any\nof the untemplate delimeters &mdash; there are only four! &mdash; can be escaped with a `\\` character\njust prior to them. The `\\` will be stripped, then the delimeter included in the text unmodified.\n\n"
    def escapingDelimeters() = block3()
    writer.writeln {
      box( None, Some("Note") )( escapingDelimeters() )
    }
    outputTransformer( untemplate.Result.Simple( mbMetadata, writer.toString ) )
    
  end apply
end Function_content_embeddable_expressions_md

def content_embeddable_expressions_md(level : Int) : untemplate.Result[SubsectionMeta] = Function_content_embeddable_expressions_md( level )
