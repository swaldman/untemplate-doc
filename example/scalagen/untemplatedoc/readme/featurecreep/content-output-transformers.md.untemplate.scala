// DO NOT HAND EDIT -- Autogenerated from 'content-output-transformers.md.untemplate' at 2023-01-11T01:07:06.411762Z

package untemplatedoc.readme.featurecreep

import java.io.{Writer,StringWriter}
import scala.collection.*

import untemplatedoc.*
import java.nio.file.Files
import com.mchange.codegenutil.*




val Untemplate_content_output_transformers_md = new untemplate.Untemplate[Int,SubsectionMeta]:
  val UntemplateFunction                    : untemplate.Untemplate[Int,SubsectionMeta] = this
  val UntemplateName                        : String = "content_output_transformers_md"
  val UntemplatePackage                     : String = "untemplatedoc.readme.featurecreep"
  val UntemplateInputName                   : String = "level"
  val UntemplateInputTypeDeclared           : String = "Int"
  val UntemplateInputTypeCanonical          : Option[String] = untemplate.Macro.nonEmptyStringOption( untemplate.Macro.recursiveCanonicalName[Int] )
  val UntemplateInputDefaultArgument        : Option[Int] = (None : Option[Int])
  val UntemplateOutputMetadataTypeDeclared  : String = "SubsectionMeta"
  val UntemplateOutputMetadataTypeCanonical : Option[String] = untemplate.Macro.nonEmptyStringOption( untemplate.Macro.recursiveCanonicalName[SubsectionMeta] )
  val UntemplateHeaderNote                  : String = ""

  def apply(level : Int) : untemplate.Result[SubsectionMeta] =
    val writer             : StringWriter = new StringWriter(11480)
    var mbMetadata         : Option[SubsectionMeta] = None
    var outputTransformer  : Function1[untemplate.Result[SubsectionMeta],untemplate.Result[SubsectionMeta]] = readme.subsection_content_transformer_md

    val title = "Output transformers"
    mbMetadata = Some( SubsectionMeta( level, title ) )


      val block0 = new Function0[String]:
        def apply() : String =
          "\nIn the header or any code section of an untemplate, you can define an `OutputTransformer`,\nlike this:\n\n```scala\noutputTransformer = myOutputTranformer\n```\n\nAs the name suggests, an output transformer will simply transform\nthe function output.\n\nIf you haven't defied a custom output metadata type,\nthen it must be a `Function1` that maps `untemplate.Result[Nothing] => `untemplate.Result[Nothing]`.\n\nIf you have defined an output metadata type, say `HttpMetadata`, then it must be\na function `untemplate.Result[HttpMetadata] => `untemplate.Result[HttpMetadata]`.\n\nBy default, every untemplate output travels through the output transformer `identity`.\nBut you can set your own.\n\nYou can set output transfers as above, \"by hand\", or you can use an [`untemplate.Customizer`](#customizers)\nto transform a whole class of untemplates. For example, you could have all untemplates\ngenerated from a file like `<something>.md.untemplate` pass through an output transformer that\nconverts Markdown to HTML.\n\nSee more on customizers below.\n"
      writer.write(block0())
      
    outputTransformer( untemplate.Result( mbMetadata, writer.toString ) )
    
  end apply
end Untemplate_content_output_transformers_md

def content_output_transformers_md(level : Int) : untemplate.Result[SubsectionMeta] = Untemplate_content_output_transformers_md( level )
