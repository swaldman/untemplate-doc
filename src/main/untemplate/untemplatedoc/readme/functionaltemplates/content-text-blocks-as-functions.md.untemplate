import java.nio.file.Files
import com.mchange.codegenutil.*

import untemplatedoc.*

val title = "Text blocks can be nested functions"

mbMetadata = Some( SubsectionMeta( level, title ) )

outputTransformer = readme.subsection_content_transformer_md

(level : Int)[SubsectionMeta]~()>

Every text block within an untemplate can be a function.


Ordinarily, text blocks just print themselves
automatically into the generated `String`. However, if you embed a name in the `\()>` delimeter that begins
the block, like `\(entry)>`, then nothing is automatically printed into the `String`. Instead you will have a function
`entry()` to work with in code blocks.

The block function will return a simple `String`.

Use `writer.write(entry())` to generate text into untemplate output.

Let's try to redo our ["Loopy" template](#repeatable-omittable-blocks) making the text block that prints `# Loopy` into a function.

Instead of beginning our blocks with `\()>`, we embed a valid scala identifier into the parenthesis,
like `\(loopy)>`.

However, doing that carries with it some complications. If we just try that in our loopy markdown
file as it was, we'll get compilation errors.

The file...
```scala
<()
writer.writeln(Files.readString(loopy2badSrc).trim)
()>
```
And the ickies...
```
[info] compiling 7 Scala sources to /Users/swaldman/Dropbox/BaseFolders/development-why/gitproj/untemplate-doc/target/scala-3.2.1/classes ...
[error] -- [E018] Syntax Error: /Users/swaldman/Dropbox/BaseFolders/development-why/gitproj/untemplate-doc/target/scala-3.2.1/src_managed/main/untemplate/untemplatedoc/untemplate_loopy2_bad_md.scala:19:26
[error] 19 |    for (i <- 0 until num)
[error]    |                          ^
[error]    |                          expression expected but val found
[error]    |
[error]    | longer explanation available when compiling with `-explain`
[error] -- [E006] Not Found Error: /Users/swaldman/Dropbox/BaseFolders/development-why/gitproj/untemplate-doc/target/scala-3.2.1/src_managed/main/untemplate/untemplatedoc/untemplate_loopy2_bad_md.scala:23:18
[error] 23 |    def loopy() = block0()
[error]    |                  ^^^^^^
[error]    |                  Not found: block0
[error]    |
[error]    | longer explanation available when compiling with `-explain`
[error] two errors found
[error] (Compile / compileIncremental) Compilation failed
```

Before things worked, because when we're just printing an expression to output, we indent the call to write in
the generated code so that it falls inside of any loops, if expressions, or other language constructs that the
prior code block has set up.

If we are going to want to treat the block as a reusable function, then we do not wish to enclose its declaration
in a very narrow scope. So, the function declaration provoked by named blocks is not indented, and named blocks
do not print by default.

If you want to use a named block, define it before you get to branches in your code flow,
then call your named function, which returns a `String` you can write. Let's fix our _Loopy_.

```scala
<()
writer.writeln(Files.readString(loopy2Src).trim)
()>
```

Not the loveliest file. But educational.
Here is the output...

```markdown
<()
writer.writeln(untemplatedoc.loopy2_md(immutable.Map.empty).text)
()>
```
([generated scala](<( sgenFor("untemplatedoc/loopy2.md.untemplate") )>))
