import java.nio.file.{Path, Files}
import com.mchange.codegenutil.*

val usrcDir   = Path.of("src/main/untemplate")
val egenDir   = Path.of("example/untemplate")
val sgenDir   = Path.of("example/scalagen")
val ceciSrc   = usrcDir.resolve("untemplatedoc/ceci-nest-pas.md.untemplate")
val ceciScala = sgenDir.resolve("untemplatedoc/untemplate_ceci_nest_pas_md.scala")
val ceci2Src   = usrcDir.resolve("untemplatedoc/ceci-nest-pas2.md.untemplate")

scratchpad += Tuple2("sgenDir",sgenDir)

()[]~()>

# Untemplate Docs

This project documents the `untemplate` project. For the code repository, please see [swaldman/untemplate](https://github.com/swaldman/untemplate).

---

Let's look at an untemplate so simple it seems not to be an untemplate at all.

```markdown
<()
writer.writeln(Files.readString(ceciSrc).trim)
()>
```
It's just a markdown file! But it's stored in an untemplate source directory as `ceci-nest-pas.md.untemplate`, so it gets
compiled to a simple scala function.

```scala
<()
writer.writeln(Files.readString(ceciScala).trim)
()>
```

We'd like, of course, for our (un)template library to do a bit more than just spit out unmodified
text files though. Let's modify our example just a bit:

```markdown
<()
writer.writeln(Files.readString(ceci2Src).trim)
()>
```

Now, the [generated scala](<(scratchpad("sgenDir"))>/untemplatedoc/untemplate_ceci_nest_pas2_md.scala) _would_ transform the markdown, like this:

```markdown
<()
writer.writeln(untemplatedoc.ceci_nest_pas2_md(immutable.Map.empty))
()>
```

The delimeter `\<( expression )>` causes the `expression` to be evaluated into the text.

_Note: This `README.md` is [generated by](<(scratchpad("sgenDir"))>/untemplatedoc/untemplate_README_md.scala] an untemplate!
So how did I slip that delimiter in? Any
of the untemplate delimeters &mdash; there are only four! &mdash; can be escaped with a `\` character
just prior to them. The `\` will be stripped, then the delimeter included in the text unmodified._

