val title = "Metainformation"
mbMetadata = Some( SubsectionMeta( level, title ) )

(level : Int)[SubsectionMeta]~()>

Within an untemplate, you have access to variables containing metainformation about the generated function.

It may be useful to use `UntemplateFunction` as a Map key, in order to decorate it with metadata.
Beyond that, if this will be useful at all, it will probably be for debugging.

For the [untemplate you are reading](<( readmeMetainformationSrc )>) [[generated scala](<( sgenFor("untemplatedoc/readme/functionaltemplates/content-metainformation.md.untemplate") )>)]:

```
UntemplateFunction:                      <(UntemplateFunction)>
UntemplateName:                         "<(UntemplateName)>"
UntemplateInputTypeDeclared:            "<(UntemplateInputTypeDeclared)>"
UntemplateInputTypeCanonical:            <(UntemplateInputTypeCanonical)>
UntemplateInputDefaultArgument:          <(UntemplateInputDefaultArgument)>
UntemplateOutputMetadataTypeDeclared:   "<(UntemplateOutputMetadataTypeDeclared)>"
UntemplateOutputMetadataTypeCanonical:   <(UntemplateOutputMetadataTypeCanonical)>

```

`UntemplateFunction` is a reference to the `Untemplate` (which is a subtype of `Function1`) that implements your untemplate.

"Declared" type values are just `String`, and names _may not be fully qualified_.

"Canonical" types are, if possible, resolved to fully qualified type names that look through (non-opaque) aliases.
However, for some types such resolution may not be possible, so these are `Option[String]`

`UntemplateInputDefaultArgument` is the value and type of the default argument.

