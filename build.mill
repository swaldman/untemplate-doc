//| mill-version: 1.0.3
//| mill-jvm-version: 17
//| mvnDeps: ["com.mchange::untemplate-mill:0.3.0-SNAPSHOT"]
//+---------------------------------------------------------

package build

import mill.*, api.*

import mill.api.Args.given

import untemplate.mill.*

// NOTE: Documentation-visible untemplate version is defined in common.scala (package untemplatedoc)!

object untemplatedoc extends UntemplateModule:

  override def scalaVersion = "3.3.6"

  override def untemplateIndexNameFullyQualified : Option[String] = Some("untemplatedoc.Untemplates")

  override def untemplateSelectCustomizer: untemplate.Customizer.Selector = key =>
    var out = untemplate.Customizer.empty
    if key.inferredPackage.startsWith("untemplatedoc.readme") then
      key.inferredFunctionName match
        case s"content_${whatever}" =>
          out = out.copy(extraImports = Seq("untemplatedoc.*", "java.nio.file.Files", "com.mchange.codegenutil.*"))
          if (whatever.endsWith("_md"))
            out = out.copy(mbDefaultOutputTransformer = Some("readme.subsection_content_transformer_md"))
        case _ => /* ignore */
    out

  def installDir  = BuildCtx.workspaceRoot
  def exampleDir  = installDir / "example"
  def scalagenDir = exampleDir / "scalagen"

  val installFileAsArgs = Task.Anon:
    val installFile = (installDir / "README.md").toString
    println(s">>>> installFile: ${installFile}")
    Args( Seq( installFile ) )

  def regenerate = Task:
    BuildCtx.withFilesystemCheckerDisabled:
      val scalagenSrc = untemplateGenerateScala().path
      os.makeDir.all(scalagenDir)
      os.copy.over(scalagenSrc, scalagenDir)
      run(installFileAsArgs)()

